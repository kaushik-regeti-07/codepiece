import React, { useState, useEffect } from 'react';
import { Download, Clock, Search, Filter, ChevronLeft, ChevronRight } from 'lucide-react';
import 'bootstrap/dist/css/bootstrap.min.css';
import './AuditLogs.css';

const AuditLogs = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [filterAction, setFilterAction] = useState('All Actions');
  const [filterRole, setFilterRole] = useState('All Users');
  const [dateRange, setDateRange] = useState('7days');
  const [currentPage, setCurrentPage] = useState(1);
  const recordsPerPage = 10;

  // Replace with your API call
  const auditData = [
    { id: 1, timestamp: '2024-01-10 14:32:15', user: 'admin@rwtool.com', role: 'Admin', action: 'USER_APPROVED', details: 'Approved subscription request for john.doe@example.com', status: 'success' },
    { id: 2, timestamp: '2024-01-10 14:28:43', user: 'admin@rwtool.com', role: 'Admin', action: 'REPORT_UPLOAD', details: 'Uploaded Q4 Financial Report', status: 'success' },
    { id: 3, timestamp: '2024-01-10 14:15:22', user: 'jane.smith@rwtool.com', role: 'Subscriber', action: 'REPORT_VIEW', details: 'Viewed Financial Report Q3 2024', status: 'success' },
    { id: 4, timestamp: '2024-01-10 13:45:11', user: 'unknown', role: 'Subscriber', action: 'LOGIN_FAILED', details: 'Failed login attempt', status: 'failed' },
    { id: 5, timestamp: '2024-01-10 13:30:22', user: 'admin@rwtool.com', role: 'Admin', action: 'USER_REJECTED', details: 'Rejected subscription request for inactive user', status: 'success' },
    { id: 6, timestamp: '2024-01-10 12:55:33', user: 'subscriber@rwtool.com', role: 'Subscriber', action: 'REPORT_DOWNLOAD', details: 'Downloaded Operations Report July 2024', status: 'success' },
    { id: 7, timestamp: '2024-01-10 12:20:15', user: 'john.doe@rwtool.com', role: 'Subscriber', action: 'USER_LOGIN', details: 'User logged in successfully', status: 'success' },
    { id: 8, timestamp: '2024-01-10 11:45:00', user: 'admin@rwtool.com', role: 'Admin', action: 'DOMAIN_ADDED', details: 'Added new domain: marketing.reports.com', status: 'success' },
    { id: 9, timestamp: '2024-01-10 11:30:15', user: 'subscriber2@rwtool.com', role: 'Subscriber', action: 'REPORT_VIEW', details: 'Viewed Marketing Report Q2 2024', status: 'success' },
    { id: 10, timestamp: '2024-01-10 11:15:45', user: 'admin@rwtool.com', role: 'Admin', action: 'USER_APPROVED', details: 'Approved subscription request for alice@example.com', status: 'success' },
    { id: 11, timestamp: '2024-01-10 10:55:30', user: 'subscriber3@rwtool.com', role: 'Subscriber', action: 'REPORT_DOWNLOAD', details: 'Downloaded HR Report June 2024', status: 'success' },
    { id: 12, timestamp: '2024-01-10 10:40:20', user: 'admin@rwtool.com', role: 'Admin', action: 'REPORT_UPLOAD', details: 'Uploaded Annual Financial Statement', status: 'success' }
  ];

  const filteredData = auditData.filter(log => {
    const matchesSearch = log.user.toLowerCase().includes(searchTerm.toLowerCase()) || log.details.toLowerCase().includes(searchTerm.toLowerCase()) || log.action.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesAction = filterAction === 'All Actions' || log.action === filterAction;
    const matchesRole = filterRole === 'All Users' || log.role === filterRole;
    return matchesSearch && matchesAction && matchesRole;
  });

  const indexOfLastRecord = currentPage * recordsPerPage;
  const indexOfFirstRecord = indexOfLastRecord - recordsPerPage;
  const currentRecords = filteredData.slice(indexOfFirstRecord, indexOfLastRecord);
  const totalPages = Math.ceil(filteredData.length / recordsPerPage);

  useEffect(() => { setCurrentPage(1); }, [searchTerm, filterAction, filterRole, dateRange]);

  return (
    <div className="audit-logs-container">
      {/* Header */}
      <div className="d-flex justify-content-between align-items-start mb-4 flex-wrap gap-3">
        <div>
          <h2 className="audit-title">Audit Logs</h2>
          <p className="audit-subtitle">Monitor all admin and subscriber activities in real-time</p>
        </div>
        <button className="btn btn-export">
          <Download size={18} className="me-2" />
          Export Logs
        </button>
      </div>

      {/* Recent Activity */}
      <div className="info-card mb-4">
        <h5 className="card-header-title">
          <Clock size={20} className="me-2" />
          Recent Activity
        </h5>
        <div className="timeline">
          {auditData.slice(0, 5).map(activity => (
            <div key={activity.id} className="timeline-item">
              <div className="timeline-dot"></div>
              <div className="timeline-content">
                <div className="d-flex justify-content-between mb-1">
                  <span className="role-badge-small">{activity.role}</span>
                  <small className="text-muted">{activity.timestamp.split(' ')[1]}</small>
                </div>
                <div className="timeline-action">{activity.action}</div>
                <div className="timeline-user">{activity.user}</div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Activity Log */}
      <div className="activity-section">
        <div className="mb-4">
          <h4 className="activity-title">Activity Log</h4>
          <p className="activity-subtitle mb-3">Complete audit trail of system activities</p>
          {(filterAction !== 'All Actions' || filterRole !== 'All Users') && (
            <div className="mb-3">
              <small className="text-muted me-2">Active Filters:</small>
              {filterAction !== 'All Actions' && <span className="filter-chip">{filterAction}</span>}
              {filterRole !== 'All Users' && <span className="filter-chip">{filterRole}</span>}
            </div>
          )}
        </div>

        {/* Filters */}
        <div className="row g-3 mb-4">
          <div className="col-md-2">
            <select className="form-select" value={filterRole} onChange={e => setFilterRole(e.target.value)}>
              {['All Users', 'Admin', 'Subscriber'].map(opt => <option key={opt}>{opt}</option>)}
            </select>
          </div>
          <div className="col-md-3">
            <select className="form-select" value={filterAction} onChange={e => setFilterAction(e.target.value)}>
              {['All Actions', 'USER_APPROVED', 'USER_REJECTED', 'REPORT_UPLOAD', 'REPORT_VIEW', 'REPORT_DOWNLOAD', 'USER_LOGIN', 'LOGIN_FAILED', 'DOMAIN_ADDED'].map(opt => <option key={opt}>{opt}</option>)}
            </select>
          </div>
          <div className="col-md-2">
            <select className="form-select" value={dateRange} onChange={e => setDateRange(e.target.value)}>
              {[{v:'today',l:'Today'},{v:'7days',l:'Last 7 Days'},{v:'30days',l:'Last 30 Days'},{v:'90days',l:'Last 90 Days'}].map(opt => <option key={opt.v} value={opt.v}>{opt.l}</option>)}
            </select>
          </div>
          <div className="col-md-4">
            <div className="input-group">
              <span className="input-group-text bg-white border-end-0">
                <Search size={18} className="text-muted" />
              </span>
              <input type="text" className="form-control border-start-0" placeholder="Search by user, action, or details..." value={searchTerm} onChange={e => setSearchTerm(e.target.value)} />
            </div>
          </div>
          <div className="col-md-1">
            <button className="btn btn-outline-secondary w-100" title="Advanced Filters">
              <Filter size={18} />
            </button>
          </div>
        </div>

        {/* Table Info */}
        <div className="mb-3 d-flex justify-content-between">
          <small className="text-muted">Showing {indexOfFirstRecord + 1} to {Math.min(indexOfLastRecord, filteredData.length)} of {filteredData.length} records</small>
          <small className="text-muted">Page {currentPage} of {totalPages || 1}</small>
        </div>

        {/* Table */}
        <div className="table-responsive">
          <table className="table audit-table">
            <thead>
              <tr>{['Timestamp', 'User', 'Role', 'Action', 'Details', 'Status'].map(h => <th key={h}>{h}</th>)}</tr>
            </thead>
            <tbody>
              {currentRecords.map(log => (
                <tr key={log.id}>
                  <td className="text-muted">{log.timestamp}</td>
                  <td className="fw-semibold">{log.user}</td>
                  <td><span className="role-badge">{log.role}</span></td>
                  <td><span className="action-badge">{log.action}</span></td>
                  <td>{log.details}</td>
                  <td><span className={`status-badge status-${log.status}`}>{log.status}</span></td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {/* Pagination */}
        <div className="d-flex justify-content-between align-items-center mt-4">
          <button className="btn btn-pagination" onClick={() => setCurrentPage(currentPage - 1)} disabled={currentPage === 1}>
            <ChevronLeft size={18} className="me-1" />
            Previous
          </button>
          <div className="pagination-info">
            <span className="page-number">{currentPage}</span>
            <span className="text-muted mx-2">of</span>
            <span className="page-number">{totalPages || 1}</span>
          </div>
          <button className="btn btn-pagination" onClick={() => setCurrentPage(currentPage + 1)} disabled={currentPage === totalPages || totalPages === 0}>
            Next
            <ChevronRight size={18} className="ms-1" />
          </button>
        </div>
      </div>
    </div>
  );
};

export default AuditLogs;



@import 'bootstrap/dist/css/bootstrap.min.css';

/* Container */
.audit-logs-container {
  padding: 2rem;
  background-color: #f8f9fc;
}

/* Header Section */
.audit-title {
  font-size: 2.25rem;
  font-weight: 700;
  background: linear-gradient(135deg, #0473BA, #38D200);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  margin-bottom: 0.75rem;
  padding-bottom: 0.25rem;
  line-height: 1.3;
}

.audit-subtitle {
  color: #64748b;
  font-size: 1rem;
}

/* Export Button */
.btn-export {
  background: linear-gradient(135deg, #0473BA, #0590d9);
  border: none;
  color: white;
  font-weight: 600;
  box-shadow: 0 2px 8px rgba(4, 115, 186, 0.2);
  transition: all 0.3s ease;
  padding: 0.625rem 1.5rem;
  display: flex;
  align-items: center;
}

.btn-export:hover {
  background: linear-gradient(135deg, #0590d9, #0473BA);
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(4, 115, 186, 0.3);
  color: white;
}

/* Info Card */
.info-card {
  background: white;
  padding: 1.75rem;
  border-radius: 12px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
}

.card-header-title {
  font-size: 1.1rem;
  font-weight: 700;
  color: #0f172a;
  margin-bottom: 1.5rem;
  display: flex;
  align-items: center;
}

/* Activity Section */
.activity-section {
  background: white;
  padding: 2rem;
  border-radius: 12px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
}

.activity-title {
  font-size: 1.5rem;
  font-weight: 700;
  color: #0f172a;
  margin-bottom: 0.5rem;
}

.activity-subtitle {
  font-size: 0.95rem;
  color: #64748b;
}

/* Timeline */
.timeline {
  display: flex;
  flex-wrap: wrap;
  gap: 1rem;
}

.timeline-item {
  position: relative;
  padding-left: 2rem;
  flex: 1;
  min-width: 200px;
  border-left: 2px solid #e2e8f0;
}

.timeline-item:last-child {
  border-left-color: transparent;
}

.timeline-dot {
  position: absolute;
  left: -6px;
  top: 4px;
  width: 10px;
  height: 10px;
  background: linear-gradient(135deg, #0473BA, #38D200);
  border-radius: 50%;
  box-shadow: 0 0 0 3px #fff, 0 0 0 5px #e2e8f0;
}

.timeline-content {
  background: #f8f9fc;
  padding: 0.75rem 1rem;
  border-radius: 8px;
}

.timeline-action {
  font-size: 0.9rem;
  font-weight: 600;
  color: #0473BA;
  font-family: monospace;
  margin-bottom: 0.25rem;
}

.timeline-user {
  font-size: 0.85rem;
  color: #64748b;
}

/* Filter Chips */
.filter-chip {
  display: inline-block;
  padding: 0.5rem 1rem;
  background: #f1f5f9;
  border-radius: 20px;
  font-size: 0.85rem;
  margin-right: 0.5rem;
  color: #475569;
  font-weight: 600;
}

/* Form Focus States */
.form-select:focus,
.form-control:focus {
  border-color: #0473BA;
  box-shadow: 0 0 0 0.2rem rgba(4, 115, 186, 0.15);
}

/* Table */
.audit-table thead th {
  background: linear-gradient(135deg, #f1f5f9, #e2e8f0);
  color: #475569;
  font-weight: 700;
  font-size: 0.8rem;
  text-transform: uppercase;
  letter-spacing: 0.8px;
  border-bottom: 2px solid #0473BA;
  padding: 1.25rem 1rem;
  white-space: nowrap;
}

.audit-table tbody td {
  padding: 1.25rem 1rem;
  vertical-align: middle;
  font-size: 0.95rem;
  color: #334155;
  border-bottom: 1px solid #f1f5f9;
}

.audit-table tbody tr {
  transition: all 0.2s ease;
}

.audit-table tbody tr:hover {
  background: linear-gradient(90deg, rgba(4, 115, 186, 0.03), rgba(56, 210, 0, 0.03));
}

/* Role Badges */
.role-badge {
  padding: 0.35rem 0.85rem;
  border-radius: 6px;
  font-size: 0.75rem;
  font-weight: 700;
  display: inline-block;
  text-transform: uppercase;
  background: linear-gradient(135deg, #0473BA, #38D200);
  color: white;
}

.role-badge-small {
  padding: 0.25rem 0.65rem;
  border-radius: 6px;
  font-size: 0.7rem;
  font-weight: 700;
  display: inline-block;
  text-transform: uppercase;
  background: linear-gradient(135deg, #0473BA, #38D200);
  color: white;
}

/* Action Badge */
.action-badge {
  background: linear-gradient(135deg, #e0f2fe, #dbeafe);
  padding: 0.5rem 1rem;
  border-radius: 6px;
  font-size: 0.75rem;
  font-weight: 700;
  font-family: monospace;
  color: #0473BA;
  border: 1px solid rgba(4, 115, 186, 0.2);
  display: inline-block;
}

/* Status Badges */
.status-badge {
  padding: 0.5rem 1.25rem;
  border-radius: 20px;
  font-size: 0.75rem;
  font-weight: 700;
  text-transform: uppercase;
  display: inline-block;
}

.status-success {
  background: linear-gradient(135deg, #38D200, #32bd00);
  color: white;
  box-shadow: 0 2px 6px rgba(56, 210, 0, 0.3);
}

.status-failed {
  background: linear-gradient(135deg, #ef4444, #dc2626);
  color: white;
  box-shadow: 0 2px 6px rgba(239, 68, 68, 0.3);
}

/* Pagination */
.btn-pagination {
  background: white;
  border: 1px solid #e2e8f0;
  color: #475569;
  font-weight: 600;
  padding: 0.625rem 1.25rem;
  border-radius: 8px;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
}

.btn-pagination:hover:not(:disabled) {
  background: linear-gradient(135deg, #0473BA, #38D200);
  color: white;
  border-color: transparent;
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(4, 115, 186, 0.2);
}

.btn-pagination:disabled {
  opacity: 0.4;
  cursor: not-allowed;
}

.pagination-info {
  display: flex;
  align-items: center;
  font-size: 0.95rem;
}

.page-number {
  font-weight: 700;
  color: #0473BA;
  font-size: 1.1rem;
}

/* Responsive Design */
@media (max-width: 768px) {
  .audit-logs-container {
    padding: 1rem;
  }

  .audit-title {
    font-size: 1.75rem;
  }

  .timeline {
    flex-direction: column;
  }

  .timeline-item {
    min-width: 100%;
  }
}



import React from 'react';
import { AuditLogViewer } from './AuditLogViewer';

function App() {
  return (
    <div>
      <AuditLogViewer />
    </div>
  );
}

export default App;







package ssss.filepathmanagement.model;

import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import java.time.LocalDate;

@Entity
@Table(name = "file_path_config")
public class FilePathConfig {
    @Id
    private Long id;
    private String reportName;
    private String sourcePath;
    private String outputPath;
    private String status;
    private LocalDate createdDate;

    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getReportName() { return reportName; }
    public void setReportName(String reportName) { this.reportName = reportName; }

    public String getSourcePath() { return sourcePath; }
    public void setSourcePath(String sourcePath) { this.sourcePath = sourcePath; }

    public String getOutputPath() { return outputPath; }
    public void setOutputPath(String outputPath) { this.outputPath = outputPath; }

    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }

    public LocalDate getCreatedDate() { return createdDate; }
    public void setCreatedDate(LocalDate createdDate) { this.createdDate = createdDate; }
}





package ssss.filepathmanagement.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import ssss.filepathmanagement.model.FilePathConfig;

@Repository
public interface FilePathConfigRepository extends JpaRepository<FilePathConfig, Long> {
}






package ssss.filepathmanagement.service;

import org.springframework.stereotype.Service;
import java.util.List;
import ssss.filepathmanagement.model.FilePathConfig;
import ssss.filepathmanagement.repository.FilePathConfigRepository;

@Service
public class FilePathManagementService {
    private final FilePathConfigRepository repository;

    public FilePathManagementService(FilePathConfigRepository repository) {
        this.repository = repository;
    }

    public List<FilePathConfig> getAllFilePathConfigs() {
        return repository.findAll();
    }
}





package ssss.filepathmanagement.controller;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import java.util.List;
import ssss.filepathmanagement.model.FilePathConfig;
import ssss.filepathmanagement.service.FilePathManagementService;

@RestController
@RequestMapping("/api/file-paths")
public class FilePathManagementController {
    private final FilePathManagementService service;

    public FilePathManagementController(FilePathManagementService service) {
        this.service = service;
    }

    @GetMapping
    public List<FilePathConfig> getFilePathConfigs() {
        return service.getAllFilePathConfigs();
    }
}








package ssss.filepathmanagement;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class FilePathManagementApplication {

    public static void main(String[] args) {
        SpringApplication.run(FilePathManagementApplication.class, args);
    }
}
