import { useState, useEffect } from "react";
import "./FilePathManagement.css";

export const FilePathManagement = () => {
  // Incoming files shown to Admin with a Send button
  const [incomingFiles, setIncomingFiles] = useState([]); // {name, size, modified}
  const [sendStatus, setSendStatus] = useState({}); // { [fileName]: 'idle'|'sending'|'success'|'error:msg' }
  const [sentRows, setSentRows] = useState({}); // persist sent files locally by name -> file object
  const [notification, setNotification] = useState("");
  const [searchTerm, setSearchTerm] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const pageSize = 10;
  const SENT_ROWS_KEY = "fpm_sent_rows_v1";
  const fetchIncoming = async () => {
    try {
      const res = await fetch("http://localhost:8080/api/routing/incoming");
      const data = await res.json();
      setIncomingFiles(Array.isArray(data) ? data : []);
    } catch (e) {
      // ignore   
    }
  };

  useEffect(() => {
    fetchIncoming();
    const id = setInterval(fetchIncoming, 5000);
    return () => clearInterval(id);
  }, []);

  // Restore sent rows from localStorage on first mount
  useEffect(() => {
    try {
      const raw = localStorage.getItem(SENT_ROWS_KEY);
      if (raw) {
        const parsed = JSON.parse(raw);
        if (parsed && typeof parsed === "object") {
          setSentRows(parsed);
          // Mark restored rows as success so button shows Sent and status is ACTIVE
          const successMap = Object.keys(parsed).reduce((acc, n) => { acc[n] = "success"; return acc; }, {});
          setSendStatus((prev) => ({ ...successMap, ...prev }));
        }
      }
    } catch {}
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // Persist sent rows to localStorage whenever they change
  useEffect(() => {
    try {
      localStorage.setItem(SENT_ROWS_KEY, JSON.stringify(sentRows));
    } catch {}
  }, [sentRows]);


  const deriveGroup = (prefix) => {
    const lower = (prefix || "").toLowerCase();
    if (lower === "finance") return "Finance";
    if (lower === "risk") return "Risk"; // Risk Management → Risk
    if (lower === "trading") return "Trading";
    if (lower === "hr") return "HR"; // HR Analytics → HR
    if (lower === "operations") return "Operations";
    if (lower === "compliance") return "Compliance";
    // fallback capitalize
    return prefix ? prefix[0].toUpperCase() + prefix.slice(1) : "Unmapped";
  };

  const toViewModel = (items) => {
    return items.map((f) => {
      const raw = f.name || "";
      const idx = raw.indexOf("_");
      const prefix = idx > 0 ? raw.substring(0, idx) : "";
      const display = idx > 0 ? raw.substring(idx + 1) : raw;
      const group = deriveGroup(prefix);
      const outputPath = `reports/${group}`;
      return { ...f, displayName: display, sourcePath: "incoming/", outputPath, prefix };
    });
  };

  // Merge incoming files with locally persisted sent rows so sent items remain visible
  const mergedList = (() => {
    const byName = new Map();
    for (const it of incomingFiles) {
      if (it && it.name) byName.set(it.name, it);
    }
    for (const it of Object.values(sentRows)) {
      if (it && it.name && !byName.has(it.name)) {
        byName.set(it.name, it);
      }
    }
    return Array.from(byName.values());
  })();

  const filteredConfigs = toViewModel(mergedList).filter((f) =>
    (f.displayName || f.name || "").toLowerCase().includes(searchTerm.toLowerCase())
  );

  useEffect(() => {
    setCurrentPage(1);
  }, [searchTerm]);

  const totalItems = filteredConfigs.length;
  const totalPages = Math.max(1, Math.ceil(totalItems / pageSize));
  const currentPageSafe = Math.min(currentPage, totalPages);
  const startIdx = (currentPageSafe - 1) * pageSize;
  const endIdx = startIdx + pageSize;
  const paginatedConfigs = filteredConfigs.slice(startIdx, endIdx);

  const formatSize = (bytes) => {
    if (!bytes && bytes !== 0) return "";
    const units = ["B", "KB", "MB", "GB"]; let i = 0; let v = bytes;
    while (v >= 1024 && i < units.length - 1) { v /= 1024; i++; }
    return `${v.toFixed(1)} ${units[i]}`;
  };

  const formatTime = (ms) => {
    if (!ms) return "";
    try { return new Date(ms).toLocaleString(); } catch { return ""; }
  };

  const sendOne = async (file) => {
    const name = file.name;
    setSendStatus((s) => ({ ...s, [name]: "sending" }));
    try {
      const res = await fetch(`http://localhost:8080/api/routing/route-one?fileName=${encodeURIComponent(name)}`, { method: "POST" });
      if (!res.ok) {
        const txt = await res.text();
        setSendStatus((s) => ({ ...s, [name]: `error:${res.status}` }));
        setNotification(`Send failed (${res.status}). ${txt || ""}`.trim());
        setTimeout(() => setNotification(""), 3000);
        return;
      }
      const data = await res.json();
      if (data && data.moved) {
        setSendStatus((s) => ({ ...s, [name]: "success" }));
        // Persist this row so it remains visible after backend removes it from incoming
        setSentRows((rows) => ({ ...rows, [name]: file }));
        setNotification(`Sent ${name}`);
        setTimeout(() => setNotification(""), 1500);
        // refresh list to remove if moved
        fetchIncoming();
      } else {
        const reason = data && data.reason ? data.reason : "failed";
        setSendStatus((s) => ({ ...s, [name]: `error:${reason}` }));
        setNotification(`Send failed: ${reason}`);
        setTimeout(() => setNotification(""), 3000);
      }
    } catch (e) {
      setSendStatus((s) => ({ ...s, [name]: `error:${e.message}` }));
      setNotification(`Send error: ${e.message}`);
      setTimeout(() => setNotification(""), 3000);
    }
  };

  return (
    <div className="fpm-container">
      {notification && (
        <div className="fpm-notification">{notification}</div>
      )}

      <div className="fpm-header">
        <div>
          <h1 className="fpm-title">File Path Management</h1>
          <p className="fpm-subtitle">Send incoming files to their mapped report folders</p>
        </div>
        {/* Configuration modal removed for this demo flow */}
      </div>

      <div className="fpm-toolbar">
        <input
          type="text"
          placeholder="Search by report name (filename after prefix)..."
          className="fpm-search-input"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          style={{ marginBottom: 0, flex: 1 }}
        />
        <div className="fpm-toolbar-spacer" />
        <button
          className="fpm-btn-secondary"
          onClick={() => {
            if (Object.keys(sentRows).length === 0) return;
            const ok = window.confirm('Clear all locally remembered "Sent" entries?');
            if (!ok) return;
            setSentRows({});
            setSendStatus({});
            try { localStorage.removeItem(SENT_ROWS_KEY); } catch {}
          }}
          title="Clear locally persisted sent rows"
          disabled={Object.keys(sentRows).length === 0}
        >
          Clear sent
        </button>
      </div>

      <table className="fpm-table">
        <thead>
          <tr>
            <th>Report Name</th>
            <th>Source Path</th>
            <th>Output Path</th>
            <th>Actions</th>
            <th>Status</th>
          </tr>
        </thead>
        <tbody>
          {paginatedConfigs.length === 0 ? (
            <tr>
              <td colSpan="5" className="fpm-no-data">
                No incoming files found
              </td>
            </tr>
          ) : (
            paginatedConfigs.map((f) => {
              const st = sendStatus[f.name] || "idle";
              const isSending = st === "sending";
              const isSuccess = st === "success";
              const isError = st.startsWith && st.startsWith("error:");
              return (
                <tr key={f.name}>
                  <td className="fpm-bold">{f.displayName || f.name}</td>
                  <td className="fpm-path">{f.sourcePath}</td>
                  <td className="fpm-path">{f.outputPath}</td>
                  <td>
                    <button
                      className={`fpm-btn-primary ${isSuccess ? 'fpm-btn-success' : ''}`}
                      disabled={isSending || isSuccess}
                      onClick={() => sendOne(f)}
                    >
                      {isSuccess ? 'Sent' : 'Send'}
                    </button>
                  </td>
                  <td>
                    {isSuccess ? (
                      <span className="fpm-badge active">ACTIVE</span>
                    ) : (
                      <span className="fpm-badge inactive">INACTIVE</span>
                    )}
                  </td>
                </tr>
              );
            })
          )}
        </tbody>
      </table>

      <div className="fpm-pagination">
        <button
          className="fpm-page-btn"
          disabled={currentPageSafe === 1}
          onClick={() => setCurrentPage(Math.max(1, currentPageSafe - 1))}
        >
          Previous
        </button>

        <div className="fpm-page-list">
          {(() => {
            const buttons = [];
            const maxButtons = 7;
            if (totalPages <= maxButtons) {
              for (let p = 1; p <= totalPages; p++) {
                buttons.push(
                  <button
                    key={p}
                    className={`fpm-page-number ${p === currentPageSafe ? "active" : ""}`}
                    onClick={() => setCurrentPage(p)}
                  >
                    {p}
                  </button>
                );
              }
            } else {
              const pages = new Set([1, 2, totalPages - 1, totalPages, currentPageSafe - 1, currentPageSafe, currentPageSafe + 1]);
              const normalized = [...pages].filter(p => p >= 1 && p <= totalPages).sort((a,b) => a - b);
              let prev = 0;
              for (const p of normalized) {
                if (p - prev > 1 && prev !== 0) {
                  buttons.push(<span key={`ellipsis-${p}`} className="fpm-page-ellipsis">…</span>);
                }
                buttons.push(
                  <button
                    key={p}
                    className={`fpm-page-number ${p === currentPageSafe ? "active" : ""}`}
                    onClick={() => setCurrentPage(p)}
                  >
                    {p}
                  </button>
                );
                prev = p;
              }
            }
            return buttons;
          })()}
        </div>

        <button
          className="fpm-page-btn"
          disabled={currentPageSafe === totalPages}
          onClick={() => setCurrentPage(Math.min(totalPages, currentPageSafe + 1))}
        >
          Next
        </button>

        <div className="fpm-page-info">
          Page {currentPageSafe} of {totalPages} • {totalItems} items
        </div>
      </div>

      {/* Modals for CRUD removed in this demo */}
    </div>
  );
};




.fpm-container {
  padding: 0;
  max-width: 100%;
}

.fpm-notification {
  position: fixed;
  top: 20px;
  right: 20px;
  background: linear-gradient(135deg, #58B24C 0%, #3D9639 100%);
  color: white;
  padding: 16px 24px;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(88, 178, 76, 0.3);
  z-index: 10000;
  animation: slideIn 0.3s ease;
  font-weight: 600;
}

@keyframes slideIn {
  from {
    transform: translateX(400px);
    opacity: 0.7;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

.fpm-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 24px;
  padding-bottom: 16px;
  border-bottom: 2px solid #58B24C;
}

.fpm-title {
  font-size: 2rem;
  margin-bottom: 0.5rem;
  font-weight: 700;
  color: #2B73D2;
}

.fpm-subtitle {
  color: #6c757d;
  font-size: 0.95rem;
  margin-top: 4px;
}

.fpm-btn-primary {
  background: #2563eb;
  color: white;
  border: none;
  padding: 8px 14px;
  border-radius: 8px;
  cursor: pointer;
  font-size: 13px;
  font-weight: 600;
  transition: all 0.3s ease;
  box-shadow: 0 2px 8px rgba(37, 99, 235, 0.2);
}

.fpm-btn-primary:hover {
  background: #1d4ed8;
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(37, 99, 235, 0.35);
}

.fpm-btn-success {
  background: #58B24C;
  color: #ffffff;
  cursor: default;
}

.fpm-btn-success:hover {
  background: #58B24C;
  transform: none;
  box-shadow: 0 2px 6px rgba(88, 178, 76, 0.25);
}

.fpm-search-input {
  width: 100%;
  padding: 12px 16px;
  border: 2px solid #e2e8f0;
  border-radius: 8px;
  font-size: 14px;
  margin-bottom: 20px;
  transition: all 0.2s ease;
}

/* Toolbar housing search + actions */
.fpm-toolbar {
  display: flex;
  align-items: center;
  gap: 12px;
  margin-bottom: 16px;
}

.fpm-toolbar .fpm-toolbar-spacer {
  flex: 1;
}

/* Subtle secondary button */
.fpm-btn-secondary {
  background: #ffffff;
  color: #334155;
  border: 1px solid #e5e7eb;
  padding: 8px 12px;
  border-radius: 8px;
  cursor: pointer;
  font-size: 13px;
  font-weight: 600;
  transition: background 0.2s ease, box-shadow 0.2s ease, color 0.2s ease;
}

.fpm-btn-secondary:hover {
  background: #f8fafc;
  box-shadow: 0 2px 6px rgba(0,0,0,0.05);
}

.fpm-btn-secondary:disabled {
  opacity: 0.6;
  cursor: default;
}

.fpm-search-input:focus {
  outline: none;
  border-color: #2B73D2;
  box-shadow: 0 0 0 3px rgba(43, 115, 210, 0.1);
}

.fpm-table {
  width: 100%;
  border-collapse: collapse;
  background: white;
  border-radius: 12px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
}

.fpm-table thead {
  background: #f7fafc;
}

.fpm-table th {
  text-align: left;
  padding: 16px;
  color: #0047BB;
  font-size: 0.75rem;
  font-weight: 700;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  border-bottom: 2px solid #00CC66;
}

.fpm-table td {
  padding: 16px;
  font-size: 0.875rem;
  color: #4a5568;
  border-bottom: 1px solid #e2e8f0;
}

.fpm-table tbody tr {
  transition: all 0.2s ease;
}

.fpm-table tbody tr:hover {
  background: #f0f9ff;
  transform: translateX(4px);
}

.fpm-bold {
  color: #2B73D2;
  font-weight: 600;
}

.fpm-path {
  font-family: 'Courier New', monospace;
  font-size: 0.8rem;
  color: #6c757d;
  background: #f7fafc;
  padding: 4px 8px;
  border-radius: 4px;
  word-break: break-word;
  overflow-wrap: anywhere;
}

.fpm-no-data {
  text-align: center;
  color: #6c757d;
  font-style: italic;
  padding: 32px !important;
}

.fpm-badge {
  padding: 4px 12px;
  border-radius: 12px;
  font-size: 0.75rem;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  transition: all 0.2s ease;
  cursor: pointer;
  display: inline-block;
}

.fpm-badge.active {
  background: linear-gradient(135deg, #E8F5E9 0%, #C8E6C9 100%);
  color: #2E7D32;
  border: 1px solid #58B24C;
}

.fpm-badge.inactive {
  background: linear-gradient(135deg, #FFEBEE 0%, #FFCDD2 100%);
  color: #C62828;
  border: 1px solid #EF5350;
}

.fpm-badge:hover {
  transform: scale(1.05);
}

.fpm-btn-edit,
.fpm-btn-delete {
  padding: 6px 12px;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-size: 0.75rem;
  font-weight: 600;
  margin-right: 8px;
  transition: all 0.2s ease;
}

.fpm-btn-edit {
  background: #2563eb;
  color: white;
}

.fpm-btn-edit:hover {
  background: #1d4ed8;
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(37, 99, 235, 0.35);
}

.fpm-btn-delete {
  background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
  color: white;
}

.fpm-btn-delete:hover {
  background: linear-gradient(135deg, #dc2626 0%, #b91c1c 100%);
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(239, 68, 68, 0.2);
}

.fpm-modal-backdrop {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
  animation: fadeIn 0.2s ease;
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

.fpm-modal {
  background: white;
  padding: 32px;
  border-radius: 12px;
  width: 90%;
  max-width: 500px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
  animation: slideUp 0.3s ease;
}

@keyframes slideUp {
  from {
    transform: translateY(50px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

.fpm-modal-title {
  font-size: 1.5rem;
  margin-bottom: 24px;
  color: #2B73D2;
  font-weight: 700;
}

.fpm-modal-text {
  color: #4a5568;
  margin-bottom: 24px;
  line-height: 1.6;
}

.fpm-input,
.fpm-select {
  width: 100%;
  padding: 12px 16px;
  border: 2px solid #e2e8f0;
  border-radius: 8px;
  font-size: 14px;
  margin-bottom: 16px;
  transition: all 0.2s ease;
}

.fpm-input:focus,
.fpm-select:focus {
  outline: none;
  border-color: #2B73D2;
  box-shadow: 0 0 0 3px rgba(43, 115, 210, 0.1);
}

.fpm-modal-actions {
  display: flex;
  justify-content: flex-end;
  gap: 12px;
  margin-top: 24px;
}

.fpm-btn-cancel {
  padding: 10px 20px;
  background: #e2e8f0;
  color: #4a5568;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-size: 14px;
  font-weight: 600;
  transition: all 0.2s ease;
}

.fpm-btn-cancel:hover {
  background: #cbd5e0;
  transform: translateY(-2px);
}

@media (max-width: 768px) {
  .fpm-header {
    flex-direction: column;
    gap: 16px;
  }

  .fpm-btn-primary {
    width: 100%;
  }

  .fpm-container {
    overflow-x: auto;
  }

  .fpm-table {
    font-size: 0.75rem;
    min-width: 720px;
  }

  .fpm-table th,
  .fpm-table td {
    padding: 12px 8px;
  }
  .fpm-modal {
    width: 95%;
    padding: 24px;
  }
  .fpm-scroll-container {
    overflow-x: auto;
  }
}

/* Pagination */
.fpm-pagination {
  display: flex;
  align-items: center;
  gap: 12px;
  justify-content: flex-end;
  margin-top: 16px;
}

.fpm-page-btn {
  padding: 8px 12px;
  border: 1px solid #e2e8f0;
  background: #ffffff;
  color: #2563eb;
  border-radius: 6px;
  cursor: pointer;
  font-size: 0.85rem;
  font-weight: 600;
  transition: all 0.2s ease;
}

.fpm-page-btn:disabled {
  color: #94a3b8;
  cursor: not-allowed;
  background: #f8fafc;
}

.fpm-page-btn:not(:disabled):hover {
  background: #eff6ff;
  transform: translateY(-1px);
}

.fpm-page-list {
  display: flex;
  align-items: center;
  gap: 6px;
}

.fpm-page-number {
  min-width: 34px;
  height: 34px;
  padding: 0 8px;
  border: 1px solid #e2e8f0;
  background: #ffffff;
  color: #2563eb;
  border-radius: 6px;
  cursor: pointer;
  font-size: 0.85rem;
  font-weight: 700;
  transition: all 0.2s ease;
}

.fpm-page-number:hover {
  background: #eff6ff;
}

.fpm-page-number.active {
  background: #2563eb;
  color: #ffffff;
  border-color: #1d4ed8;
}

.fpm-page-ellipsis {
  color: #94a3b8;
  padding: 0 4px;
}

.fpm-page-info {
  margin-left: 8px;
  color: #6c757d;
  font-size: 0.85rem;
}
